{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;AAEA,IAAkB,aAKjB;AALD,WAAkB,aAAa;IAE9B,0BAAS,CAAA;IACT,8BAAa,CAAA;IACb,0BAAS,CAAA;AACV,CAAC,EALiB,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAK9B;AAED,MAAM,EAAE,GAAG,2BAAyB,CAAC;AAM5B,gBAAE;AALX,MAAM,IAAI,GAAG,+BAA2B,CAAC;AAK5B,oBAAI;AAJjB,MAAM,EAAE,GAAG,2BAAyB,CAAC;AAIlB,gBAAE;AAFrB,MAAM,MAAM,GAAG,mBAAmB,CAAC;AAEZ,wBAAM;AAe7B,SAAgB,IAAI,CAAC,IAAY,EAAE,qCAA2C;IAE7E,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACtC,CAAC;AAHD,oBAGC;AAED,SAAgB,OAAO,CAAC,IAAY,EAAE,OAAkB;;IAEvD,MAAM,OAAO,GAAG,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,mCAAI,EAAE,CAAC;IAEvC,OAAO;QACN,EAAE,EAAE,CAAC,OAAO,CAAC,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACvD,IAAI,EAAE,CAAC,OAAO,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACxC,EAAE,EAAE,CAAC,OAAO,CAAC,EAAE,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;KAC/B,CAAC;AACZ,CAAC;AATD,0BASC;AAED,SAAgB,eAAe,CAAC,IAAY,EAAE,OAAkB;IAE/D,MAAM,GAAG,GAAG,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAEnC,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC,iCAAoB,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,6BAAkB,CAAC,4BAAiB,CAAA;AACjG,CAAC;AALD,0CAKC;AAED,SAAgB,MAAM,CAAC,OAAe;IAErC,OAAO,OAAO,oCAAuB,CAAA;AACtC,CAAC;AAHD,wBAGC;AAED,SAAgB,IAAI,CAAC,OAAe;IAEnC,OAAO,OAAO,gCAAqB,CAAA;AACpC,CAAC;AAHD,oBAGC;AAED,SAAgB,IAAI,CAAC,OAAe;IAEnC,OAAO,OAAO,gCAAqB,CAAA;AACpC,CAAC;AAHD,oBAGC;AAED,SAAgB,SAAS,CAAC,IAAY;IAErC,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AAC3B,CAAC;AAHD,8BAGC;AAED,SAAgB,sBAAsB,CAAC,IAAY,EAAE,qCAA2C;IAE/F,MAAM,GAAG,GAAG,OAAO,GAAG,OAAO,GAAG,OAAO,CAAC;IACxC,MAAM,GAAG,GAAG,OAAO,GAAG,OAAO,CAAC;IAE9B,OAAO,IAAI;SACT,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC;SACvB,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC;SAC3B,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CACvB;AACH,CAAC;AAVD,wDAUC;AAED,kBAAe,IAAI,CAAC","sourcesContent":["import { ITSAndTypeAndStringLiteral, ITSTypeAndStringLiteral } from 'ts-type/lib/helper/string';\n\nexport const enum EnumLineBreak\n{\n\tCR = \"\\r\",\n\tCRLF = \"\\r\\n\",\n\tLF = \"\\n\",\n}\n\nconst CR = EnumLineBreak.CR as const;\nconst CRLF = EnumLineBreak.CRLF as const;\nconst LF = EnumLineBreak.LF as const;\n\nconst R_CRLF = /\\r\\n|\\r(?!\\n)|\\n/g;\n\nexport { CR, CRLF, LF, R_CRLF }\n\nexport type ILineBreak = ITSTypeAndStringLiteral<EnumLineBreak>;\n\nexport type ILineBreakInput = ITSAndTypeAndStringLiteral<EnumLineBreak>;\n\nexport interface IOptions\n{\n\tdisable?: {\n\t\tlf?: boolean,\n\t\tcrlf?: boolean,\n\t\tcr?: boolean,\n\t}\n}\n\nexport function crlf(text: string, newline: ILineBreakInput = EnumLineBreak.LF): string\n{\n\treturn text.replace(R_CRLF, newline);\n}\n\nexport function chkcrlf(text: string, options?: IOptions)\n{\n\tconst disable = options?.disable ?? {};\n\n\treturn {\n\t\tlf: !disable.lf && /\\n/.test(text.replace(/\\r\\n/g, '')),\n\t\tcrlf: !disable.crlf && /\\r\\n/.test(text),\n\t\tcr: !disable.cr && /\\r(?!\\n)/.test(text),\n\t} as const;\n}\n\nexport function detectLineBreak(text: string, options?: IOptions)\n{\n\tconst _lb = chkcrlf(text, options);\n\n\treturn _lb.crlf ? EnumLineBreak.CRLF : (_lb.lf || !_lb.cr) ? EnumLineBreak.LF : EnumLineBreak.CR\n}\n\nexport function isCRLF(newline: string): newline is EnumLineBreak.CRLF\n{\n\treturn newline === EnumLineBreak.CRLF\n}\n\nexport function isLF(newline: string): newline is EnumLineBreak.LF\n{\n\treturn newline === EnumLineBreak.LF\n}\n\nexport function isCR(newline: string): newline is EnumLineBreak.CR\n{\n\treturn newline === EnumLineBreak.CR\n}\n\nexport function lineSplit(text: string)\n{\n\treturn text.split(R_CRLF);\n}\n\nexport function crlf_unicode_normalize(text: string, newline: ILineBreakInput = EnumLineBreak.LF): string\n{\n\tconst ln3 = newline + newline + newline;\n\tconst ln2 = newline + newline;\n\n\treturn text\n\t\t.replace(/\\u000C/g, ln3)\n\t\t.replace(/\\u2028/g, newline)\n\t\t.replace(/\\u2029/g, ln2)\n\t\t;\n}\n\nexport default crlf;\n"]}