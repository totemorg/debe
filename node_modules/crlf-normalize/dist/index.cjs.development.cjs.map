{"version":3,"file":"index.cjs.development.cjs","sources":["../src/index.ts"],"sourcesContent":["import { ITSAndTypeAndStringLiteral, ITSTypeAndStringLiteral } from 'ts-type/lib/helper/string';\n\nexport const enum EnumLineBreak\n{\n\tCR = \"\\r\",\n\tCRLF = \"\\r\\n\",\n\tLF = \"\\n\",\n}\n\nconst CR = EnumLineBreak.CR as const;\nconst CRLF = EnumLineBreak.CRLF as const;\nconst LF = EnumLineBreak.LF as const;\n\nconst R_CRLF = /\\r\\n|\\r(?!\\n)|\\n/g;\nconst R_CRLF_MATCH = new RegExp(`(${R_CRLF.source})`, R_CRLF.flags);\n\nexport { CR, CRLF, LF, R_CRLF, R_CRLF_MATCH }\n\nexport type ILineBreak = ITSTypeAndStringLiteral<EnumLineBreak>;\n\nexport type ILineBreakInput = ITSAndTypeAndStringLiteral<EnumLineBreak>;\n\nexport interface IOptions\n{\n\tdisable?: {\n\t\tlf?: boolean,\n\t\tcrlf?: boolean,\n\t\tcr?: boolean,\n\t}\n}\n\nexport function crlf(text: string, newline: ILineBreakInput = EnumLineBreak.LF): string\n{\n\treturn text.replace(R_CRLF, newline);\n}\n\nexport function chkcrlf(text: string, options?: IOptions)\n{\n\tconst disable = options?.disable ?? {};\n\n\treturn {\n\t\tlf: !disable.lf && /\\n/.test(text.replace(/\\r\\n/g, '')),\n\t\tcrlf: !disable.crlf && /\\r\\n/.test(text),\n\t\tcr: !disable.cr && /\\r(?!\\n)/.test(text),\n\t} as const;\n}\n\nexport type IChkCrlf = ReturnType<typeof chkcrlf>;\n\nexport function detectLineBreak(text: string, options?: IOptions)\n{\n\tconst _lb = chkcrlf(text, options);\n\treturn _detectLineBreakCore(_lb)\n}\n\nexport function _detectLineBreakCore(_lb: IChkCrlf)\n{\n\treturn _lb.crlf ? EnumLineBreak.CRLF : (_lb.lf || !_lb.cr) ? EnumLineBreak.LF : EnumLineBreak.CR\n}\n\nexport function isCRLF(newline: string): newline is EnumLineBreak.CRLF\n{\n\treturn newline === EnumLineBreak.CRLF\n}\n\nexport function isLF(newline: string): newline is EnumLineBreak.LF\n{\n\treturn newline === EnumLineBreak.LF\n}\n\nexport function isCR(newline: string): newline is EnumLineBreak.CR\n{\n\treturn newline === EnumLineBreak.CR\n}\n\nexport function lineSplit(text: string)\n{\n\treturn text.split(R_CRLF);\n}\n\nexport function crlf_unicode_normalize(text: string, newline: ILineBreakInput = EnumLineBreak.LF): string\n{\n\tconst ln3 = newline + newline + newline;\n\tconst ln2 = newline + newline;\n\n\treturn text\n\t\t.replace(/\\u000C/g, ln3)\n\t\t.replace(/\\u2028/g, newline)\n\t\t.replace(/\\u2029/g, ln2)\n\t\t;\n}\n\nexport function isEqualWithIgnoreLineSeparators(a: string, b: string)\n{\n\tconst _lb_a: IChkCrlf = chkcrlf(a);\n\tconst _lb_b: IChkCrlf = chkcrlf(b);\n\n\tlet bool = false;\n\n\tif (_lb_a.cr === _lb_b.cr && _lb_a.crlf === _lb_b.crlf && _lb_a.lf === _lb_b.lf)\n\t{\n\t\tbool = crlf(a) === crlf(b);\n\t}\n\n\treturn {\n\t\tbool,\n\t\t_lb_a,\n\t\t_lb_b,\n\t}\n}\n\nexport type ILineBreakName = keyof typeof EnumLineBreak;\n\nexport function toLineBreakName(newline: ILineBreakInput): ILineBreakName\n{\n\tswitch (newline)\n\t{\n\t\tcase EnumLineBreak.LF:\n\t\t\treturn 'LF'\n\t\tcase EnumLineBreak.CR:\n\t\t\treturn 'CR'\n\t\tcase EnumLineBreak.CRLF:\n\t\t\treturn 'CRLF'\n\t}\n\n\tthrow new TypeError(`Invalid line break`);\n}\n\nexport function nameToLineBreak(name: ILineBreakName | string): EnumLineBreak\n{\n\tswitch (name?.toUpperCase())\n\t{\n\t\tcase 'LF':\n\t\t\treturn EnumLineBreak.LF\n\t\tcase 'CR':\n\t\t\treturn EnumLineBreak.CR\n\t\tcase 'CRLF':\n\t\t\treturn EnumLineBreak.CRLF\n\t}\n\n\tthrow new TypeError(`Invalid line break name: ${name}`);\n}\n\nexport default crlf;\n"],"names":["EnumLineBreak","CR","CRLF","LF","R_CRLF","text","chkcrlf","options","lf","test","crlf","cr","detectLineBreak","_detectLineBreakCore","_lb","newline","isLF","isCR","ln2","replace","_lb_b","_lb_a","bool"],"mappings":";;;;;;;EAICA,aAMK,CAAA,MAAA,CAAA,GAAA,MAAA,CAAA;AANLA,EAAAA,aAAA,CAAS,IAAA,CAAA,GAAA,IAAA,CAAA;wBAET,KAAAA,qBAAA,GAAA,EAAA,CAAA,CAAA,CAAA;AACAC,MAAAA,EAAAA,GAAAA,KAAAA;AAEKC,MAAAA,IAAAA,GAAAA,OAAAA;AALLC,MAAAA,EAAAA,GAAAA,KAAAA;AASD,MAAMC,MAAA,GAAA,oBAAA;AAuBU,MAAA,YAAA,gBAAA,IAAA,MAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,KAAA,EAAA;AAAA,SAAA,IAAA,CAAA,IAAA,EAAA,OAAA,GAAA,IAAA,EAAA;AApBhB,EAAA,OAAWC,IAAgC,CAAA,OAAA,CAAA,MAAA,EAAA,OAAA,CAAA,CAAA;AAoB3B,CAAA;AAHR,SAAIC,OAAiB,CAAA,IAAA,EAAA,OAAA,EAAA;AAAA,EAAA,IAAA,gBAAA,CAAA;EAGN,wDAAAC,8BAAAA;EAwBvB,OAAgB;AAGfC,IAAAA,EAAAA,EAAA,CAAA,OAAA,CAAA,EAAA,IAAA,IAAA,CAAAC,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,OAAA,EAAA,EAAA,CAAA,CAAA;AAEKC,IAAAA,IAAAA,EAAAA,CAAAA,OAAAA,CAAAA,IAAAA,IAAAA,MAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA;IALNC,EAKM,EAAA,CAAA,OAAA,CAAA,EAAA,IAAA,UAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AAGN,GAAA,CAAA;;SAIQC,eAAA,OAAA,OAAA,EAAA;EAGF,MAAA,GAAA,GAAA,OAAA,CAAA,IAAA,EAAA,OAAA,CAAA,CAAA;AAELC,EAAAA,OAAAA,oBAAkB,CAAAC,GAAQ,CAAA,CAAA;;SAGXD,oBAAA,CAAAC,GAAA,EAAA;;AAGf,CAAA;AAAA,SAAA,MAAA,CAAA,OAAA,EAAA;AAGE,EAAA,OAAOC,OAAgB,KAAA,MAAA,CAAA;;AAM1B,SAAgBC,IAAA,CAAAD,OAAAA,EAAAA;AAEf,EAAA,OAAA,OAAA,KAAA,IAAA,CAAA;AARE,CAAA;SAWeE,IAAA,CAAA,OAAA,EAAA;SAIhBF,OAAO,KAAA,IAAA,CAAA;AACP,CAAA;AAAA,SAAA,SAAA,CAAA,IAAA,EAAA;SAGIV,IAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CAAA;;;;EAQN,MAAgBa,GAAe,GAAAH,OAAyB,GAAA,OAAA,CAAA;AAItD,EAAA,OAAAV,IACCc,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,GAAAA,CAAAA,CALHA,OAKG,CAAA,SAAA,EAAA,OAAA,CAAA,CAEAA,OAAW,CAAA,SAAA,EAAA,GAAA,CAAA,CAAA;;AAGZ,SAAA,+BAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AAHC,EAAA,MAAA,KAAA,GAAA,OAAA,CAAA,CAAA,CAAA,CAAA;EAMH,MAACC,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAIA,EAAA,IAAA,IAAA,GAAA,KAAY,CAAA;EAEX,IAAA,KAAA,CAAA,EAAK,KAAI,KAAA,CAAA,EAAA,IAAAC,KAAA,CAAA,IAAA,KAAA,KAAA,CAAA,IAAA,IAAA,KAAA,CAAA,EAAA,KAAA,KAAA,CAAA,EAAA,EAAA;AAETC,IAAAA,IAAA,GAAAZ,IAAAA,CAAAA,CAAAA,CAAAA,KAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA;;AAEA,EAAA,OAAA;;AAIDW,IAAAA,KAAAA;AAdDD,IAAAA,KAAAA;AAiBA,GAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}