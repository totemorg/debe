{"version":3,"file":"index.esm.mjs","sources":["../src/index.ts"],"sourcesContent":["import { ITSAndTypeAndStringLiteral, ITSTypeAndStringLiteral } from 'ts-type/lib/helper/string';\n\nexport const enum EnumLineBreak\n{\n\tCR = \"\\r\",\n\tCRLF = \"\\r\\n\",\n\tLF = \"\\n\",\n}\n\nconst CR = EnumLineBreak.CR as const;\nconst CRLF = EnumLineBreak.CRLF as const;\nconst LF = EnumLineBreak.LF as const;\n\nconst R_CRLF = /\\r\\n|\\r(?!\\n)|\\n/g;\nconst R_CRLF_MATCH = new RegExp(`(${R_CRLF.source})`, R_CRLF.flags);\n\nexport { CR, CRLF, LF, R_CRLF, R_CRLF_MATCH }\n\nexport type ILineBreak = ITSTypeAndStringLiteral<EnumLineBreak>;\n\nexport type ILineBreakInput = ITSAndTypeAndStringLiteral<EnumLineBreak>;\n\nexport interface IOptions\n{\n\tdisable?: {\n\t\tlf?: boolean,\n\t\tcrlf?: boolean,\n\t\tcr?: boolean,\n\t}\n}\n\nexport function crlf(text: string, newline: ILineBreakInput = EnumLineBreak.LF): string\n{\n\treturn text.replace(R_CRLF, newline);\n}\n\nexport function chkcrlf(text: string, options?: IOptions)\n{\n\tconst disable = options?.disable ?? {};\n\n\treturn {\n\t\tlf: !disable.lf && /\\n/.test(text.replace(/\\r\\n/g, '')),\n\t\tcrlf: !disable.crlf && /\\r\\n/.test(text),\n\t\tcr: !disable.cr && /\\r(?!\\n)/.test(text),\n\t} as const;\n}\n\nexport type IChkCrlf = ReturnType<typeof chkcrlf>;\n\nexport function detectLineBreak(text: string, options?: IOptions)\n{\n\tconst _lb = chkcrlf(text, options);\n\treturn _detectLineBreakCore(_lb)\n}\n\nexport function _detectLineBreakCore(_lb: IChkCrlf)\n{\n\treturn _lb.crlf ? EnumLineBreak.CRLF : (_lb.lf || !_lb.cr) ? EnumLineBreak.LF : EnumLineBreak.CR\n}\n\nexport function isCRLF(newline: string): newline is EnumLineBreak.CRLF\n{\n\treturn newline === EnumLineBreak.CRLF\n}\n\nexport function isLF(newline: string): newline is EnumLineBreak.LF\n{\n\treturn newline === EnumLineBreak.LF\n}\n\nexport function isCR(newline: string): newline is EnumLineBreak.CR\n{\n\treturn newline === EnumLineBreak.CR\n}\n\nexport function lineSplit(text: string)\n{\n\treturn text.split(R_CRLF);\n}\n\nexport function crlf_unicode_normalize(text: string, newline: ILineBreakInput = EnumLineBreak.LF): string\n{\n\tconst ln3 = newline + newline + newline;\n\tconst ln2 = newline + newline;\n\n\treturn text\n\t\t.replace(/\\u000C/g, ln3)\n\t\t.replace(/\\u2028/g, newline)\n\t\t.replace(/\\u2029/g, ln2)\n\t\t;\n}\n\nexport function isEqualWithIgnoreLineSeparators(a: string, b: string)\n{\n\tconst _lb_a: IChkCrlf = chkcrlf(a);\n\tconst _lb_b: IChkCrlf = chkcrlf(b);\n\n\tlet bool = false;\n\n\tif (_lb_a.cr === _lb_b.cr && _lb_a.crlf === _lb_b.crlf && _lb_a.lf === _lb_b.lf)\n\t{\n\t\tbool = crlf(a) === crlf(b);\n\t}\n\n\treturn {\n\t\tbool,\n\t\t_lb_a,\n\t\t_lb_b,\n\t}\n}\n\nexport type ILineBreakName = keyof typeof EnumLineBreak;\n\nexport function toLineBreakName(newline: ILineBreakInput): ILineBreakName\n{\n\tswitch (newline)\n\t{\n\t\tcase EnumLineBreak.LF:\n\t\t\treturn 'LF'\n\t\tcase EnumLineBreak.CR:\n\t\t\treturn 'CR'\n\t\tcase EnumLineBreak.CRLF:\n\t\t\treturn 'CRLF'\n\t}\n\n\tthrow new TypeError(`Invalid line break`);\n}\n\nexport function nameToLineBreak(name: ILineBreakName | string): EnumLineBreak\n{\n\tswitch (name?.toUpperCase())\n\t{\n\t\tcase 'LF':\n\t\t\treturn EnumLineBreak.LF\n\t\tcase 'CR':\n\t\t\treturn EnumLineBreak.CR\n\t\tcase 'CRLF':\n\t\t\treturn EnumLineBreak.CRLF\n\t}\n\n\tthrow new TypeError(`Invalid line break name: ${name}`);\n}\n\nexport default crlf;\n"],"names":["EnumLineBreak","CR","CRLF","LF","R_CRLF","R_CRLF_MATCH","RegExp","source","flags","crlf","text","newline","replace","chkcrlf","options","_options$disable","lf","disable","test","cr","detectLineBreak","_detectLineBreakCore","_lb","isCRLF","isLF","isCR","lineSplit","split","ln2","isEqualWithIgnoreLineSeparators","a","b","_lb_a","_lb_b","bool"],"mappings":";;;eAICA,EAMK,OAAA,QANLA,EAAS,KAAA;QAETA,IAAA,CAAA;;AACAC,MAAAA,IAAAA,MAEKC,IAAAA,QALLC,IAAAA,MASKC,IAAA,qBAuBUC,IAAA,IAAAC,OAAA,IAAAF,EAAAG,WAAAH,EAAAI;;AAAA,SAAAC,KAAAC,GAAAC,IAAA;EApBhB,OAAWD,EAAgCE,QAAAR,GAAAO;AAoB3B;;AAHR,SAAIE,QAAiBH,GAAAI;EAAA,IAAAC;EAGN,6CAAAD;EAwBvB,OAAgB;IAGfE,KAAAC,EAAAD,MAAA,KAAAE,KAAAR,EAAAE,QAAA,SAAA;IAEKH,OAAAA,EAAAA,QAAAA,OAAAA,KAAAA;IALNU,KAKMF,EAAAE,MAAA,WAAAD,KAAAR;;;;SAOEU,mBAAAN;EAKPO,OAAAA,qBAFKR,QAAAH,GAAAI;;;SAKUO,qBAAAC;;AAGf;;AAAA,SAAAC,OAAAZ;EAGE,OAAuB,WAAhBA;;;AAMV,SAAgBa,KAAAb;EAEf,OAAA,SAAAA;AARE;;SAWec,KAAAd;SAIT,SAAPA;AACA;;AAAA,SAAAe,UAAAhB;SAGIA,EAAAiB,MAAAvB;;;;QAQUwB,IAAejB,IAAyBA;EAItD,OAAAD,EACCE,QAAAA,sBALHA,QAKG,WAAAD,GAEAC,QAAW,WAAAgB;;;AAGZ,SAAAC,gCAAAC,GAAAC;EAHC,MAAAC,IAAAnB,QAAAiB,IAMFG,IAAAA,QAAAA;EAIA,IAAAC,KAAA;EAMC,OAJAF,EAAAb,OAASc,EAAAd,MAAAa,EAAAvB,SAAAwB,EAAAxB,QAAAuB,EAAAhB,OAAAiB,EAAAjB,OAETkB,IAAAzB,KAAAA,OAAAA,KAAAA;EAEA;;IAIDuB;IAdDC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}