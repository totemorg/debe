# [ATOMIC](https://github.com/totem-man/atomic)

**ATOMIC** provides cloud computing for python, js, cv, matlab, R, ... engines 
via the following web endpoints:

	POST advance/step/insert a stateful engine
	PUT	compile/init/update a stateful engine
	DELETE deallocate/kill/delete a stateful engine
	GET execute/read/select a stateless engines

Stateless engines are supported at the read (GET) endpoint, and are provided
the following parameters:

	TAU.i = {tau} = input event sinked to an engine
	TAU.o = {tau} = output event sourced from an engine
	TAU.p = {sql: {...}, query: {...} }

where the query hash will contain the supplied url parameters.

Stateful engines implement the step-init-kill (POST-PUT-DELETE) endpoints, and are 
supplied event tokens (tau):

	TAU.i = [{tau}, ...] = events arriving to engine's input port
	TAU.o = [{tau}, ...] = events departing from engine's output port
	TAU.p = {port1: {...}, ... port2: {...}, ... sql: {...} }
	TAU.port = engine's in/out port to step
	TAU.thread = engine's 0-base thread counter

where input/output ports and engine code are defined by the [engine context](http://totem.hopto.org/api.view) || [COE](https://totem.west.ile.nga.ic.gov/api.view) || [SBU](https://totem.nga.mil/api.view).

An event token typically contain the following default fields (they can 
be freely interpretted and extended by the engine):

	job = "" 	= Current job thread N.N...
	work = 0 	= Anticipated/delivered data volume (dims bits etc)
	disem = "" 	= Disemination channel for this event
	classif = ""	= Classification of this event
	cost = ""	= Billing center
	policy = ""	= Data retention policy
	status = 0	= Status code
	value = 0	= Flow calculation

## Manage

	npm install @totemstan/atomic	# install
	npm run start [ ? | $ | ...]	# Unit test
	npm run verminor				# Roll minor version
	npm run vermajor				# Roll major version
	npm run redoc					# Regen documentation

## Usage

Acquire and optionally configure **ATOMIC** like this:

	var ATOMIC = require("atomic").config({
		key: value, 						// set key
		"key.key": value, 					// indexed set
		"key.key.": value					// indexed append
	});

where configuration keys follow [ENUMS deep copy conventions](https://github.com/totem-man/enums)


## Program Reference
<details>
<summary>
<i>Open/Close</i>
</summary>
{{>main}}
</details>

## Contacting, Contributing, Following

Feel free to 
* submit and status [TOTEM issues](http://totem.hopto.org/issues.view) 
* contribute to [TOTEM notebooks](http://totem.hopto.org/shares/notebooks/) 
* revise [TOTEM requirements](http://totem.hopto.org/reqts.view) 
* browse [TOTEM holdings](http://totem.hopto.org/) 
* or follow [TOTEM milestones](http://totem.hopto.org/milestones.view) 


* * *

&copy; 2012 ACMESDS