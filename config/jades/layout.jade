//- UNCLASSIFIED

block layout_parms
	- prep = true 
	- cardreader = false
	- xeditskin = false

if type == "help"
	:markdown
		# layout options:

			- prep = prepare brower (!{prep}) 
			- cardreader = use card reader (!{cardreader})
			- editskin = provide skin editor (!{editskin})
			- socketio = socketio path (!{socketio})
			- client = client name (!{client})
			- table = endpoint name (!{table})
			- type = render type (!{type})
			- query = query options (!{JSON.stringify(query)})
			- path = source path (!{path})

	block layout_help

else
	html(lang="en")
		head
			meta(http-equiv="Content-Type",content="text/html; charset=utf-8;")

			//- Tell IE to use the latest, best version (or Chrome Frame if pre-IE11).
			
			meta(http-equiv="X-UA-Compatible", content="IE=Edge,chrome=1")

			//- Make mobile application consume the full browser screen and disable user scaling.
			
			meta(name="viewport", content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no")
			//link(rel="stylesheet", type="text/css", href="/clients/css/w3.w3css.css")

			//-	Check browser compatibility. Requires javascript and JSON. Invalid browsers will crash or ignore startup scripts.
			
			if prep
				title #{nick}-#{table}
				// Flag javascript-disabled browsers
				noscript
					p Please enable Javascript and Cookies to access #{nick}.

				// Add JSON to json-disabled browsers
				if ! JSON.parse
					script(type="text/javascript",src="/clients/json/json2.js")

				//- Add global ajax method to navigator.ajax
				// script(type="text/javascript",src="/uis/ajax.js")

				//- Add global link follower method to navigator.follow
				// script(type="text/javascript",src="/uis/follow.js")

			//-
				The socketio interface is established when the server does a require( "socketio") to create a 
				socketio = "/socketio/socketio-client.js" endpoint from which the client imports its client via a 
				<script src=socketio> and defines a default ioClient name.
				
				When the sever uses the legacy (buggy) socket.io, the server provide a socketio = 
				"/socket.io/socket.io-client.js" endpoint to the npm-developed socket.io.  This socket.io interface is 
				likewise established when the server does a 
				require( "socket.io" ) to create its endpoint from which the client imports its socket.io
				client via a <script src=socketio> and defines a default ioClient name.
				
				When sockets are not being supported, the server provides socketio = "/socketio/nosockets.js". 

			if socketio
				script(type="text/javascript",src=socketio)
				script.
					var 
						ioClient = "#{client}";
						// alert("socketio=#{socketio} client=#{client}")

			//- reserved for cardreader support
			
			if cardreader
				script.
					navigator.mediaDevices.enumerateDevices().then( devs => console.log("devices", devs) );

			block layout_head

		body
			if xeditskin
				- button = name => "".tag("img",{src:`/clients/icons/actions/${name}.png`,width:15,height:15}).tag("button",{id:name,text:name,value:"on",class:"btn",onclick:`edit_${name}()`})
				- tools = button("save") + button("find") + button("replace") + button("show") 

				style.
					#aceEdit {
						position: relative;
						top: 0;
						right: 0;
						bottom: 0;
						left: 0;
						height: 200px;
						width: 1600px;
					}
					.app_editor {
						height: 300px;
					}
					.app_editor_wrapper {
						background-color: #cccccc;
						border-bottom: 1px solid #222222;
					}
					.app_editor_dragbar {
						background-color: #222222;
						width: 100%;
						height: 4px;
						cursor: row-resize;
						opacity: 1;
					}

				script(type="text/javascript",src="/clients/acemin/ace.js")
				script(type="text/javascript",src="/clients/acemin/ext-linking.js")
				script(type="text/javascript",src="/clients/acemin/ext-language_tools.js")
				
				span!= tools
				
				#aceEdit_wrapper.app_editor_wrapper
					#aceEdit.app_editor= skin
					#aceEdit_dragbar.app_editor_dragbar
				
				script.
					function Each( A, cb ) {
						Object.keys(A).forEach( key => cb( key, A[key] ) );
					}
					/**
					Tag url (el = ? || &) or html (el = html tag) with specified attributes.

					@memberof String
					@param {String} el tag element = ? || & || html tag
					@param {String} at tag attributes = {key: val, ...}
					@return {String} tagged results
					*/
						
					String.prototype.tag = function (el,at) {
						switch (el) {
							case "/":
							case "?":
							case "&":   // tag a url
								var rtn = this;

								if (rtn.indexOf("?") >= 0) el = "&";

								Each(at, (key,val) => {
									if ( val ) {
										rtn += el + key + "=" + val;
										el = "&";
									}
								});

								return rtn;	

							case "[]":
							case "()":
								var rtn = this+el.substr(0,1), sep="";
								Each(at, (key,val) => {
									rtn += sep + key + ":" + JSON.stringify(val);
									sep = ",";
								});
								return rtn+el.substr(-1);

							case ":":
							case "=":
								var rtn = this, sep="";
								Each(at, (key,val) => {
									rtn += sep + key + el + JSON.stringify(val);
									sep = ",";
								});
								return rtn;

							case "":
								return `<a href="${el}">${this}</a>`;

							default: // tag html

								var rtn = "<"+el+" ";

								if ( at )
									Each( at, (key,val) => {
										if ( val )
											rtn += key + "='" + val + "' ";
									});

								switch (el) {
									case "embed":
									case "img":
									case "link":
									case "input":
										return rtn+">" + this;
									default:
										return rtn+">" + this + "</"+el+">";
								}
						}
					}
					function Ajax(ctx,method,url,cb) {	//< send context hash using method to url with callback cb if async
						const
							req = new XMLHttpRequest(),
							get = method.toUpperCase() == "GET";

						//console.log(">>>>>ajax", method, get, url, ctx);
						req.open( method, get ? url.tag("?",ctx) : url, cb?true:false );

						if ( get ) 
							req.send();

						else 
							req.send(JSON.stringify(ctx));

						if ( cb ) 
							req.onreadystatechange = () => {
								if ( req.readyState == 4 ) cb( req.responseText );
							}; 

						else 
							return req.responseText;
					}
					function edit_save() {
						Ajax({
							code: ed.getValue()
						}, "put", `/engines?name=#{table}`, res => {
							alert("save #{table}");
							//alert(res);
						});
					}
					function edit_find() {
						alert("find");
					}
					function edit_replace() {
						alert("replace");
					}
					function edit_show() {
						//alert("show");
						const 
							ctx_editor = document.getElementById("aceEdit"),
							rect = ctx_editor.getBoundingClientRect();

						ctx_editor.style.height = "10px";
						ctx_editor.style.opacity = 1;
						ed.resize();
						//ed.blur();
						//ed.hideComposition();
						//ed.destroy();
						//alert("hide");
						//alert("mod="+ed.session.getMode());
						//alert("ses="+ed.session);
						//alert("ses="+ed.getSession());
						//alert("lin="+ed.getSession().getLine());
						//alert("val="+ed.getValue());
						//ed.setStyle("{height:50px;}");
						//ed.renderer.onResize(true,20,1200,50);
						//alert("set");
						//ed.onResize(true,40,1200,50);
						//alert("ln="+ed.session.getLine());
						//const aceEdit = document.getElementById("aceEdit_wrapper");
						//console.log(">>>>>>>>>ace", aceEdit);
						//alert(aceEdit.value);
						//alert(aceEdit.textContent);
						//alert(aceEdit.innerText);
						//aceEdit.height = 10; 
						//aceEdit.hidden = true;
					}
					
					const ed = ace.edit("aceEdit", {
						//mode: "ace/mode/javascript",
						//mode: "ace/mode/asciidoc",
						mode: "ace/mode/coffee",
						theme: "ace/theme/chaos",
						selectionStyle: "text",
						autoScrollEditorIntoView: true,
						copyWithEmptySelection: true,
						fontSize: 16,
						enableBasicAutocompletion: true,	// requires ext-lang scripts
						enableLiveAutocompletion: true,		// requires ext-lang scripts
						highlightActiveLine: true,
						hScrollBarAlwaysVisible: true,
						vScrollBarAlwaysVisible: true,
						//enableLinking: true,		// requires ext-link scripts
						foldStyle: "markbegin",
						showGutter: true,
						showLineNumbers: true,
						showFoldWidgets: true 
					}); 
					ed.on("linkClick", data => {	// requires ext-link scripts
						console.log("CLICK", data); 
						if (data && data.token && data.token.type == "link") 
							window.open(data.token.value, "_blank");

						function GetWordByPos(str, pos) {	// get only one word from the whole string
							var left = str.substr(0, pos);
							var right = str.substr(pos);

							left = left.replace(/^.+ /g, "");
							right = right.replace(/ .+$/g, "");

							alert("get="+ left + right);
							return left + right;
						}

						var pos = data.position.column;
						var token = data.token.value;
						var url = GetWordByPos(token,pos);
						alert('You clicked on '+url);
					});

					// https://ourcodeworld.com/articles/read/994/how-to-make-an-ace-editor-instance-resizable-by-the-user-dinamically-with-a-drag-and-drop-bar
					// https://ourcodeworld.com/articles/read/994/how-to-make-an-ace-editor-instance-resizable-by-the-user-dinamically-with-a-drag-and-drop-bar
					//ed.setTheme("ace/theme/monokai");

					// inline must be true to syntax highlight PHP without opening <?php tag
					//ed.getSession().setMode( { path: "ace/mode/php", inline: true } );

					// Global variable to store the ids of the status of the current dragged ace editor.
					window.draggingAceEditor = {};

					function makeAceEditorResizable(editor) {
						var id_editor = editor.container.id;
						var id_dragbar = id_editor + '_dragbar';
						var id_wrapper =  id_editor + '_wrapper';
						var wpoffset = 0;
						window.draggingAceEditor[id_editor] = false;

						var action_mousedown = function(e) {
							e.preventDefault();

							window.draggingAceEditor[id_editor] = true;

							// Set editor opacity to 0 to make transparent so our wrapper div shows
							document.getElementById(id_editor).style.opacity = 0;

							document.addEventListener("mousemove", action_document_mousemove);
						};

						var action_document_mousemove = function(e) {
							e.preventDefault();
							var _editor = document.getElementById(id_editor);
							var rect = _editor.getBoundingClientRect();

							var rsl = {
								top: rect.top + document.body.scrollTop
							};

							var top_offset = rsl.top - wpoffset;

							var actualY = e.pageY - wpoffset;

							// editor height
							var eheight = actualY - top_offset;

							// Set wrapper height
							document.getElementById(id_wrapper).style.height = eheight;

							// Set dragbar opacity while dragging (set to 0 to not show)
							document.getElementById(id_dragbar).style.opacity =  0.15;
						};

						document.getElementById(id_dragbar).addEventListener("mousedown", action_mousedown);

						var action_mouseup = function(e) {
							if (window.draggingAceEditor[id_editor]) {
								var ctx_editor = document.getElementById(id_editor);

								var rect = ctx_editor.getBoundingClientRect();

								var rsl = {
									top: rect.top + document.body.scrollTop
								};

								var actualY = e.pageY - wpoffset;
								var top_offset = rsl.top - wpoffset;
								var eheight = actualY - top_offset;

								document.removeEventListener("mousemove", action_document_mousemove);

								// Set dragbar opacity back to 1
								document.getElementById(id_dragbar).style.opacity = 1;

								// Set height on actual editor element, and opacity back to 1
								ctx_editor.style.height = eheight + "px";
								ctx_editor.style.opacity = 1;

								// Trigger ace editor resize()
								editor.resize();

								window.draggingAceEditor[id_editor] = false;
							}

							else {
								//editor.resize();
							}
						};

						document.addEventListener("mouseup", action_mouseup);
					}

					makeAceEditorResizable(ed);

			block layout_body

//- UNCLASSIFIED